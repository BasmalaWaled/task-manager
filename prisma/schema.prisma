// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id
  name                String
  email               String           @unique
  about               String?
  industryType        String
  role                String
  country             String
  workspaces          WorkspaceMember[]
  image               String?
  tasks               Task[]
  activities          Activity[]
  comments            Comment[]
  subscriptions       Subscription[]
  onboardingCompleted Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  description String?
  ownerId     String?
  members     WorkspaceMember[]
  projects    Project[]
  inviteCode  String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum AccessLevel {
  OWNER
  MEMBER
  VIEWER
}

model WorkspaceMember {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  accessLevel AccessLevel  @default(MEMBER)
  projectAccess ProjectAccess[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, workspaceId])
}

model Project {
  id            String         @id @default(uuid())
  name          String
  description   String?
  workspaceId   String
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks         Task[]
  comments      Comment[]
  activities    Activity[]
  projectAccess ProjectAccess[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  documentation Documentation?

  @@unique([workspaceId, name])
}

model ProjectAccess {
  id                String           @id @default(uuid())
  workspaceMemberId String
  workspaceMember   WorkspaceMember  @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  projectId         String
  project           Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  hasAccess         Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([workspaceMemberId, projectId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  IN_REVIEW
  BACKLOG
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(LOW)
  dueDate     DateTime
  startDate   DateTime
  deadline    DateTime 
  position    Int 
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignedTo  User?    @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  attachments File[]
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@index([projectId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([userId])
}

model Documentation {
  id        String   @id @default(uuid())
  projectId String   @unique
  content   String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy String
}

enum FileType {
  IMAGE
  PDF
}

model File {
  id        String   @id @default(uuid())
  name      String
  url       String
  taskId    String?
  type      FileType
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  EXPIRED
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              SubscriptionPlan   @default(FREE)
  lemonsqueezyId    String?
  orderId           String?
  customerId        String?
  currentPeriodEnd  DateTime?
  frequence         String             @default("MONTHLY")
  cancelAtPeriodEnd Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([userId])
}
